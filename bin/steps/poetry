#!/usr/bin/env bash

# export CLINT_FORCE_COLOR=1
# export PIPENV_FORCE_COLOR=1
# shellcheck source=bin/utils
source "$BIN_DIR/utils"
set -e

if [[ -f poetry.lock ]]; then
    if [[ -f .heroku/python/poetry.lock.sha256 ]]; then
        if [[ $(openssl dgst -sha256 poetry.lock) == $(cat .heroku/python/poetry.lock.sha256) ]]; then
            # Measure that we're using poetry.
            mcount "tool.poetry"

            # Don't skip installation of there are git deps.
            if ! grep -q 'git' poetry.lock; then
                echo "Skipping installation, as poetry.lock hasn't changed since last deploy." | indent

                mcount "tool.poetry"
                export SKIP_POETRY_INSTALL=1
                export SKIP_PIP_INSTALL=1
            fi
        fi
    fi
fi


if [ ! "$SKIP_POETRY_INSTALL" ]; then
    # Pipenv support (Generate requirements.txt with pipenv).
    if [[ -f poetry.lock ]]; then
        # Measure that we're using poetry.
        mcount "tool.poetry"

        # Skip pip install, later.
        export SKIP_PIP_INSTALL=1

        # Set Pip env vars
        # This reads certain environment variables set on the Heroku app config
        # and makes them accessible to the pip install process.
        #
        # PIP_EXTRA_INDEX_URL allows for an alternate pypi URL to be used.
        if [[ -r "$ENV_DIR/PIP_EXTRA_INDEX_URL" ]]; then
            PIP_EXTRA_INDEX_URL="$(cat "$ENV_DIR/PIP_EXTRA_INDEX_URL")"
            export PIP_EXTRA_INDEX_URL
            mcount "buildvar.PIP_EXTRA_INDEX_URL"
        fi

        # Set SLUGIFY_USES_TEXT_UNIDECODE, required for Airflow versions >=1.10
        if [[ -r "$ENV_DIR/SLUGIFY_USES_TEXT_UNIDECODE" ]]; then
            SLUGIFY_USES_TEXT_UNIDECODE="$(cat "$ENV_DIR/SLUGIFY_USES_TEXT_UNIDECODE")"
            export SLUGIFY_USES_TEXT_UNIDECODE
            mcount "buildvar.SLUGIFY_USES_TEXT_UNIDECODE"
        fi

        export POETRY_VERSION="1.0.5"

        # Install poetry.
        # Due to weird old pip behavior and pipenv behavior, pipenv upgrades pip
        # to latest if only --upgrade is specified. Specify upgrade strategy to
        # avoid this eager behavior.
        puts-step "Installing poetry…"
        /app/.heroku/python/bin/pip install pipenv==$POETRY_VERSION --upgrade --upgrade-strategy only-if-needed &> /dev/null

        if [[ ! -f /app/.heroku/python/bin/poetry ]]; then
          # we need to symlink it to the expected spot
          ln -s $HOME/.poetry/bin/poetry /app/.heroku/python/bin/poetry
        fi


        # Install the test dependencies, for CI.
        if [ "$INSTALL_TEST" ]; then
            puts-step "Installing dev dependencies…"
            /app/.heroku/python/bin/poetry install 2>&1 | cleanup | indent

        # Install the dependencies.
        elif [[ ! -f poetry.lock ]]; then
            puts-step "Installing dependencies with poetry $POETRY_VERSION…"
            /app/.heroku/python/bin/poetry install --no-dev 2>&1 | indent

        else
            poetry export -f requirements.txt > requirements.txt
            "$BIN_DIR/steps/pip-uninstall"
            cp requirements.txt .heroku/python/requirements-declared.txt
            openssl dgst -sha256 poetry.lock > .heroku/python/poetry.lock.sha256

            puts-step "Installing dependencies with poetry $POETRY_VERSION…"
            /app/.heroku/python/bin/poetry install --no-dev 2>&1 | indent
        fi
    fi
else
    export SKIP_PIP_INSTALL=1
    poetry export -f requirements.txt > requirements.txt
fi
